#!/usr/bin/env python3
import rospy
from artemis_ol import interface
from sensor_msgs.msg import Imu, MagneticField
from geometry_msgs.msg import Vector3
from math import pi


if __name__=="__main__":
    rospy.init_node("artemis_ol_driver")
    frame_id = rospy.get_param("~frame_id", "imu_link")
    accel_stddev = rospy.get_param("~linear_acceleration_stddev", 0.07217913743449356)  # Taken max from IMC-20948_covariance.yaml
    gyro_stddev = rospy.get_param("~angular_velocity_stddev", 0.0294051717887628)  # Taken max from IMC-20948_covariance.yaml
    mag_stddev = rospy.get_param("~magnetic_field_stddev", 1.5530569285629352e-06)  # Taken max from IMC-20948_covariance.yaml
    imu_raw_publisher = rospy.Publisher("imu/data_raw", Imu, queue_size=100)
    imu_msg = Imu()
    imu_msg.header.frame_id = frame_id
    imu_msg.orientation_covariance = [-1., 0., 0., 0., 0., 0., 0., 0., 0.] # Since the sensor provides no orientation, just provide raw data.
    imu_msg.linear_acceleration_covariance = [accel_stddev ** 2, 0., 0., 0., accel_stddev ** 2, 0., 0., 0., accel_stddev ** 2]
    imu_msg.angular_velocity_covariance = [gyro_stddev ** 2, 0., 0., 0., gyro_stddev ** 2, 0., 0., 0., gyro_stddev ** 2]
    imu_mag_publisher = rospy.Publisher("imu/mag", MagneticField, queue_size=100)
    mag_msg = MagneticField()
    mag_msg.header.frame_id = frame_id
    mag_msg.magnetic_field_covariance = [mag_stddev ** 2, 0., 0., 0., mag_stddev ** 2, 0., 0., 0., mag_stddev ** 2]
    rospy.loginfo(f"{rospy.get_name()}: Connecting to logger.")
    logger_handle = interface.LoggerManager(queue_size=30)
    logger_handle.start()
    rospy.loginfo(f"{rospy.get_name()}: Beginning stream.")
    try:
        while not rospy.is_shutdown():
            rospy.sleep(0.000001)
            data = next(logger_handle)
            if data is None:
                continue
            acc_keys = tuple(("a"+key for key in ("x", "y", "z")))
            gyr_keys = tuple(("g"+key for key in ("x", "y", "z")))
            mag_keys = tuple(("m"+key for key in("x", "y", "z")))
            if "rawax" in data:
                acc_keys = tuple(("rawa"+key for key in ("x", "y", "z")))
                gyr_keys = tuple(("rawg"+key for key in ("x", "y", "z")))
                mag_keys = tuple(("rawm"+key for key in("x", "y", "z")))

            rospy.loginfo_once(f"{rospy.get_name()}: First reading received.")
            imu_msg.header.stamp = rospy.Time.now()
            mag_msg.header.stamp = imu_msg.header.stamp
            # Convert acceleration from milli G to m/s/s
            #rospy.loginfo("%f\t%f\t%f", data[acc_keys[0]], data[acc_keys[1]], data[acc_keys[2]])
            imu_msg.linear_acceleration = Vector3(data[acc_keys[0]] / 1000.0 * 9.80865,
                                                data[acc_keys[1]] / 1000.0 * 9.80865,
                                                data[acc_keys[2]] / 1000.0 * 9.80865)
            # Convert angular velocity from dps to rad/s
            imu_msg.angular_velocity = Vector3(data[gyr_keys[0]] * pi / 180.0,
                                            data[gyr_keys[1]] * pi / 180.0,
                                            data[gyr_keys[2]] * pi / 180.0)
            # Convert magnetic field from micro tesla to tesla
            mag_msg.magnetic_field = Vector3(data[mag_keys[0]] / 1e6,
                                            -data[mag_keys[1]] / 1e6,
                                            -data[mag_keys[2]] / 1e6)
            imu_raw_publisher.publish(imu_msg)
            imu_mag_publisher.publish(mag_msg)
    except rospy.ROSInterruptException:
        pass
    finally:
        rospy.loginfo(f"{rospy.get_name()}: Closing logger serial connection.")
        logger_handle.stop()
        logger_handle.join()
        rospy.loginfo(f"{rospy.get_name()}: Exiting.")
