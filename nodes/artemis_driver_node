#!/usr/bin/env python3
import rospy
from artemis_ol import interface
from sensor_msgs.msg import Imu, MagneticField, FluidPressure, Temperature, TimeReference
from geometry_msgs.msg import Vector3
from math import pi
import datetime as dt

if __name__ == "__main__":
    rospy.init_node("artemis_ol_driver")
    frame_id = rospy.get_param("~frame_id", "imu_link")
    accel_stddev = rospy.get_param("~linear_acceleration_stddev",
                                   0.07217913743449356)  # Taken max from IMC-20948_covariance.yaml
    gyro_stddev = rospy.get_param("~angular_velocity_stddev",
                                  0.0294051717887628)  # Taken max from IMC-20948_covariance.yaml
    mag_stddev = rospy.get_param("~magnetic_field_stddev",
                                 1.5530569285629352e-06)  # Taken max from IMC-20948_covariance.yaml
    imu_raw_publisher = rospy.Publisher("imu/data_raw", Imu, queue_size=10)
    imu_msg = Imu()
    imu_msg.header.frame_id = frame_id
    imu_msg.orientation_covariance = [-1., 0., 0., 0., 0., 0., 0., 0.,
                                      0.]  # Since the sensor provides no orientation, just provide raw data.
    imu_msg.linear_acceleration_covariance = [accel_stddev ** 2, 0., 0., 0., accel_stddev ** 2, 0., 0., 0.,
                                              accel_stddev ** 2]
    imu_msg.angular_velocity_covariance = [gyro_stddev ** 2, 0., 0., 0., gyro_stddev ** 2, 0., 0., 0., gyro_stddev ** 2]
    imu_mag_publisher = rospy.Publisher("imu/mag", MagneticField, queue_size=10)
    mag_msg = MagneticField()
    mag_msg.header.frame_id = frame_id
    mag_msg.magnetic_field_covariance = [mag_stddev ** 2, 0., 0., 0., mag_stddev ** 2, 0., 0., 0., mag_stddev ** 2]
    bar30_publisher = rospy.Publisher("bar30/pressure", FluidPressure, queue_size=10)
    bar30_msg = FluidPressure()
    bar30_msg.header.frame_id = "bar30_link"
    bar30_msg.variance = rospy.get_param("~pressure_stddev", 6.375928044706325) ** 2  # Fluid pressure standard deviation (Pa)
    bar30_temp_msg = Temperature()
    bar30_temp_msg.header.frame_id = bar30_msg.header.frame_id
    bar30_temp_msg.variance = rospy.get_param("~temperature_stddev", 0.023496293439484173) ** 2  # Fluid temperature standard deviation
    bar30_temp_publisher = rospy.Publisher("bar30/temperature", Temperature, queue_size=10)
    timeref_msg = TimeReference()
    timeref_msg.header.frame_id = imu_msg.header.frame_id
    timeref_msg.source = "artemis_rtc"
    timeref_publisher = rospy.Publisher("imu/time_reference", TimeReference, queue_size=10)
    rospy.loginfo(f"{rospy.get_name()}: Connecting to logger. Wait 10 - 15 s.")
    logger_handle = interface.LoggerManager(queue_size=30)
    logger_handle.start()
    rospy.loginfo(f"{rospy.get_name()}: Beginning stream.")
    try:
        while not rospy.is_shutdown():
            rospy.sleep(0.000001)
            data = next(logger_handle)
            if data is None:
                continue
            elif isinstance(data, int):
                rospy.logwarn_throttle(10.0, f"{rospy.get_name()}: Serial Disconnect, Reconnecting.")
                continue
            acc_keys = tuple(("a" + key for key in ("x", "y", "z")))
            gyr_keys = tuple(("g" + key for key in ("x", "y", "z")))
            mag_keys = tuple(("m" + key for key in ("x", "y", "z")))
            if "rawax" in data:
                acc_keys = tuple(("rawa" + key for key in ("x", "y", "z")))
                gyr_keys = tuple(("rawg" + key for key in ("x", "y", "z")))
                mag_keys = tuple(("rawm" + key for key in ("x", "y", "z")))
            if "mbar" in data:
                bar30_msg.fluid_pressure = data["mbar"] * 100.0  # Convert millibar to Pa
            if "degc" in data:
                bar30_temp_msg.temperature = data["degc"]  # Temperature in degrees celsius
            rospy.loginfo_once(f"{rospy.get_name()}: First reading received.")
            imu_msg.header.stamp = rospy.Time.now()
            mag_msg.header.stamp = imu_msg.header.stamp
            bar30_msg.header.stamp = imu_msg.header.stamp
            bar30_temp_msg.header.stamp = imu_msg.header.stamp
            timeref_msg.header.stamp = imu_msg.header.stamp
            timeref_msg.time_ref = rospy.Time.from_sec(data["timestamp"].replace(tzinfo=dt.timezone.utc).timestamp())
            # Convert acceleration from milli G to m/s/s
            imu_msg.linear_acceleration = Vector3(data[acc_keys[0]] / 1000.0 * 9.80865,
                                                  data[acc_keys[1]] / 1000.0 * 9.80865,
                                                  data[acc_keys[2]] / 1000.0 * 9.80865)
            # Convert angular velocity from dps to rad/s
            imu_msg.angular_velocity = Vector3(data[gyr_keys[0]] * pi / 180.0,
                                               data[gyr_keys[1]] * pi / 180.0,
                                               data[gyr_keys[2]] * pi / 180.0)
            # Convert magnetic field from micro tesla to tesla
            mag_msg.magnetic_field = Vector3(data[mag_keys[0]] / 1e6,
                                             -data[mag_keys[1]] / 1e6,
                                             -data[mag_keys[2]] / 1e6)
            imu_raw_publisher.publish(imu_msg)
            imu_mag_publisher.publish(mag_msg)
            if "mbar" in data:
                bar30_publisher.publish(bar30_msg)
            if "degc" in data:
                bar30_temp_publisher.publish(bar30_temp_msg)
            timeref_publisher.publish(timeref_msg)
    except rospy.ROSInterruptException:
        pass
    finally:
        rospy.loginfo(f"{rospy.get_name()}: Closing logger serial connection.")
        logger_handle.stop()
        logger_handle.join()
        rospy.loginfo(f"{rospy.get_name()}: Exiting.")
